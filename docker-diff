#!/usr/bin/env -S uv run python
"""
Docker Diff Runner Script
Command-line interface for the docker_diff module
"""

import argparse
import sys
from datetime import datetime

from docker_diff import (
    DockerImageDB, 
    print_comparison_summary, 
    list_comparisons, 
    list_images, 
    show_unique_files
)


def main():
    parser = argparse.ArgumentParser(
        description="Docker Image Comparison Database Manager",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s compare ubuntu:18.04 ubuntu:20.04
  %(prog)s compare --name "Node Versions" node:16 node:18 node:20
  %(prog)s scan alpine:latest
  %(prog)s list-comparisons
  %(prog)s show 5
  %(prog)s list-images
  %(prog)s query 3 --unique --limit 50
        """
    )
    
    parser.add_argument("--db", default="docker_images.db",
                       help="Database file path (default: docker_images.db)")
    
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Compare command
    compare_parser = subparsers.add_parser("compare", help="Compare multiple Docker images")
    compare_parser.add_argument("images", nargs="+", help="Docker image names to compare")
    compare_parser.add_argument("--name", help="Custom name for this comparison")
    compare_parser.add_argument("--description", help="Description for this comparison")
    
    # Scan command
    scan_parser = subparsers.add_parser("scan", help="Scan a single Docker image")
    scan_parser.add_argument("image", help="Docker image name to scan")
    
    # List comparisons
    subparsers.add_parser("list-comparisons", help="List all comparisons")
    subparsers.add_parser("list-images", help="List all scanned images")
    
    # Show comparison
    show_parser = subparsers.add_parser("show", help="Show detailed comparison results")
    show_parser.add_argument("comparison_id", type=int, help="Comparison ID to show")
    
    # Query command
    query_parser = subparsers.add_parser("query", help="Query comparison details")
    query_parser.add_argument("comparison_id", type=int, help="Comparison ID to query")
    query_parser.add_argument("--unique", action="store_true", help="Show unique files")
    query_parser.add_argument("--limit", type=int, default=20, help="Limit results (default: 20)")
    
    # Initialize database
    init_parser = subparsers.add_parser("init", help="Initialize database with schema")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # Initialize database
    try:
        db = DockerImageDB(args.db)
    except Exception as e:
        print(f"Error initializing database: {e}")
        sys.exit(1)
    
    try:
        if args.command == "compare":
            if len(args.images) < 2:
                print("Error: Need at least 2 images to compare")
                sys.exit(1)
            
            name = args.name or f"Comparison_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            description = args.description or f"Comparing: {', '.join(args.images)}"
            
            print(f"Starting comparison: {name}")
            comparison_id = db.compare_images(args.images, name)
            print(f"Comparison completed with ID: {comparison_id}")
            print_comparison_summary(db, comparison_id)
            
        elif args.command == "scan":
            print(f"Scanning image: {args.image}")
            image_id = db.scan_image(args.image)
            print(f"Scan completed. Image ID: {image_id}")
            
        elif args.command == "list-comparisons":
            list_comparisons(db)
            
        elif args.command == "list-images":
            list_images(db)
            
        elif args.command == "show":
            print_comparison_summary(db, args.comparison_id)
            
        elif args.command == "query":
            if args.unique:
                show_unique_files(db, args.comparison_id, args.limit)
            else:
                print_comparison_summary(db, args.comparison_id)
                
        elif args.command == "init":
            print(f"Database initialized at: {db.db_path}")
            
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()